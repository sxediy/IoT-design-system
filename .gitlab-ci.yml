stages:
#  - prepare
  - build
  - feature
  - deploy
  - review

variables:
  NPM_ARTIFACTORY: http://unixrepo.megafon.ru/artifactory/api/npm/npm-remote
  ENV_URL_DEVELOP: http://msk-iot-dstand.megafon.ru/ids
  ENV_URL_STAGING: http://msk-iot-sstand.megafon.ru/ids
  ENV_URL_MASTER: http://msk-iot-mstand.megafon.ru/ids
  ENV_URL_FEATURE: http://msk-iot-dstand.megafon.ru/feature/ids
  IMAGE: ${CI_REGISTRY_IMAGE}/${CI_COMMIT_REF_NAME}:${CI_PIPELINE_ID}
  TEST_CT: ${CI_PROJECT_NAME}_test
  EXTERNAL_PORT: 9090
  INTERNAL_PORT: 80
  SERVICE: iot-design-system
  SERVICE_NAME: iot-design-system_${CI_COMMIT_REF_NAME}
  DOCKER_HOST_DEVELOP: "msk-iot-swarm01.megafon.ru"
  DOCKER_HOST_STAGING: "msk-iot-swarm11.megafon.ru"
  DOCKER_HOST_MASTER: "msk-iot-swarm21.megafon.ru"
  DOCKER_HOST_FEATURE: "msk-iot-swarm01.megafon.ru"

before_script:
  - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
#---------BUILD----------
build:
  stage: build
  script:
    - docker build --no-cache --build-arg NPM_ARTIFACTORY=${NPM_ARTIFACTORY} --build-arg NAME_PROJECT=${CI_PROJECT_NAME} --pull --target app -t ${IMAGE} -f Dockerfile .
    - docker run -ti -d --name ${TEST_CT} ${IMAGE} && sleep 10
    - if [[ $(docker inspect ${TEST_CT} --format '{{ .State.Status}}') != "running" ]]; then echo "CT is not Running!" &&  docker logs ${TEST_CT} && docker rm -f ${TEST_CT} && exit 1; else echo "CT Running!" && docker rm -f ${TEST_CT}; fi;
    - docker push ${IMAGE}
    - docker image prune -f --filter "dangling=true" && docker container prune -f
  tags:
    - build

#--------SCRIPT DEPLOY---------
.deploy-script: &deploy-script
  script:
   - if [ ${CI_COMMIT_REF_NAME} == "develop" ];
          then export ENV_URL=${ENV_URL_DEVELOP} DOCKER_HOST_TEMP=${DOCKER_HOST_DEVELOP};
          elif [ ${CI_COMMIT_REF_NAME} == "staging" ]; then export ENV_URL=${ENV_URL_STAGING} DOCKER_HOST_TEMP=${DOCKER_HOST_STAGING};
          elif [ ${CI_COMMIT_REF_NAME} == "master" ]; then export ENV_URL=${ENV_URL_MASTER} DOCKER_HOST_TEMP=${DOCKER_HOST_MASTER};
          else export EXTERNAL_PORT=$(( RANDOM % 1000 + 32000 )) ENV_URL=${ENV_URL_FEATURE} DOCKER_HOST_TEMP=${DOCKER_HOST_FEATURE} && echo -e "\n########################\n#\n# STAND URL $ENV_URL:$EXTERNAL_PORT\n#\n########################";
      fi;
   - mkdir -p ~/.docker && echo ${TLSCACERT} | base64 -d > ~/.docker/ca.pem && echo ${TLSCERT} | base64 -d > ~/.docker/cert.pem && echo ${TLSKEY} | base64 -d > ~/.docker/key.pem && export DOCKER_TLS_VERIFY=1
   - for host in ${DOCKER_HOST_TEMP}; do export DOCKER_HOST=tcp://${host}:2376 && if [ "$(docker ps -q -f name=${SERVICE_NAME})" ]; then docker stop ${SERVICE_NAME} && docker rm ${SERVICE_NAME}; elif [ "$(docker ps -aq -f name=${SERVICE_NAME})" ]; then docker rm ${SERVICE_NAME}; fi; docker run -ti -d --restart always -p ${EXTERNAL_PORT}:${INTERNAL_PORT} -e TZ=Europe/Moscow --label service=${SERVICE} --label env=${CI_COMMIT_REF_NAME} --name ${SERVICE_NAME} ${IMAGE}; done;
   - sleep 15;
   - for host in ${DOCKER_HOST_TEMP}; do export DOCKER_HOST=tcp://${host}:2376 && if [[ $(docker inspect ${SERVICE_NAME} --format '{{ .State.Status}}') != "running" ]]; then echo "CT is not Running!" &&  docker logs ${SERVICE_NAME} && docker rm -f ${SERVICE_NAME} && exit 1; else echo "CT Running!"; fi; done;
   - rm -rf ~/.docker && unset DOCKER_TLS_VERIFY DOCKER_HOST
  tags:
    - build

.review-script: &review-script
  script:
    - mkdir -p ~/.docker && echo ${TLSCACERT} | base64 -d > ~/.docker/ca.pem && echo ${TLSCERT} | base64 -d > ~/.docker/cert.pem && echo ${TLSKEY} | base64 -d > ~/.docker/key.pem && DOCKER_TLS_VERIFY=1 DOCKER_HOST=${DOCKER_HOST_FEATURE} docker rm -f ${SERVICE_NAME}
    - rm -rf ~/.docker && unset DOCKER_TLS_VERIFY DOCKER_HOST
 
#--------DEPLOY---------
deploy feature:
  stage: feature
  script:
  <<: *deploy-script
  environment:
    name: feature/${CI_COMMIT_REF_NAME}
  except:
    - develop
    - staging
    - master
  when: manual

deploy develop:
  stage: deploy
  <<: *deploy-script
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: ${ENV_URL_DEVELOP}
  only:
    - develop

deploy staging:
  stage: deploy
  <<: *deploy-script
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: ${ENV_URL_STAGING}
  only:
   - staging
  when: manual

deploy production:
  stage: deploy
  <<: *deploy-script
  environment:
    name: ${CI_COMMIT_REF_NAME}
    url: ${ENV_URL_MASTER}
  only:
    - master
  when: manual

#-------STOP FEATURE ENV-------
stop_review:
  stage: review
  <<: *review-script
  when: manual
  except:
    - develop
    - staging
    - master
  environment:
    name: feature/${CI_BUILD_REF_NAME}
    action: stop
  tags:
    - build
